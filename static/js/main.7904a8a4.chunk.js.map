{"version":3,"sources":["App.js","serviceWorker.js","components/particlesjs-config.js","components/ParticlesBg.js","index.js"],"names":["App","react_default","a","createElement","Component","Boolean","window","location","hostname","match","particleOpt","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","retina_detect","console","log","ReactDOM","render","props","className","particles_default","params","document","getElementById","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAceA,0LARX,OACEC,EAAAC,EAAAC,cAAA,mBAHYC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBS,oBCKTC,SDLS,CACbC,UAAa,CACXC,OAAU,CACRC,MAAS,IACTC,QAAW,CACTC,QAAU,EACVC,WAAc,OAGlBC,MAAS,CACPJ,MAAS,WAEXK,MAAS,CACPC,KAAQ,SACRC,OAAU,CACRC,MAAS,EACTJ,MAAS,WAEXK,QAAW,CACTC,SAAY,GAEdC,MAAS,CACPC,IAAO,iBACPJ,MAAS,IACTK,OAAU,MAGdC,QAAW,CACTd,MAAS,GACTe,QAAU,EACVC,KAAQ,CACNd,QAAU,EACVe,MAAS,EACTC,YAAe,GACfC,MAAQ,IAGZC,KAAQ,CACNpB,MAAS,EACTe,QAAU,EACVC,KAAQ,CACNd,QAAU,EACVe,MAAS,GACTI,SAAY,GACZF,MAAQ,IAGZG,YAAe,CACbpB,QAAU,EACVqB,SAAY,kBACZnB,MAAS,UACTU,QAAW,GACXN,MAAS,GAEXgB,KAAQ,CACNtB,QAAU,EACVe,MAAS,EACTQ,UAAa,MACbV,QAAU,EACVW,UAAY,EACZC,SAAY,MACZC,QAAU,EACVC,QAAW,CACT3B,QAAU,EACV4B,QAAW,IACXC,QAAW,QAIjBC,cAAiB,CACfC,UAAa,SACbC,OAAU,CACRC,QAAW,CACTjC,QAAU,EACVkC,KAAQ,QAEVC,QAAW,CACTnC,QAAU,EACVkC,KAAQ,QAEVE,QAAU,GAEZC,MAAS,CACPC,KAAQ,CACNjB,SAAY,IACZD,YAAe,CACbR,QAAW,IAGf2B,OAAU,CACRlB,SAAY,IACZH,KAAQ,GACRsB,SAAY,EACZ5B,QAAW,EACXG,MAAS,GAEX0B,QAAW,CACTpB,SAAY,IACZmB,SAAY,IAEdE,KAAQ,CACNC,aAAgB,GAElBC,OAAU,CACRD,aAAgB,KAItBE,eAAiB,ICtGnBC,QAAQC,IAAIpD,GCCZqD,IAASC,OAAO/D,EAAAC,EAAAC,cDCD,SAAqB8D,GAChC,OACIhE,EAAAC,EAAAC,cAAA,OAAK+D,UAAU,aACXjE,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,CACIkE,OAAQ1D,MCLR,MAAiB2D,SAASC,eAAe,UACzDP,IAASC,OAAO/D,EAAAC,EAAAC,cAACoE,EAAD,MAASF,SAASC,eAAe,SHyH3C,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7904a8a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n  \"particles\": {\n    \"number\": {\n      \"value\": 142,\n      \"density\": {\n        \"enable\": true,\n        \"value_area\": 1200\n      }\n    },\n    \"color\": {\n      \"value\": \"#ffffff\"\n    },\n    \"shape\": {\n      \"type\": \"circle\",\n      \"stroke\": {\n        \"width\": 0,\n        \"color\": \"#000000\"\n      },\n      \"polygon\": {\n        \"nb_sides\": 5\n      },\n      \"image\": {\n        \"src\": \"img/github.svg\",\n        \"width\": 100,\n        \"height\": 100\n      }\n    },\n    \"opacity\": {\n      \"value\": 0.5,\n      \"random\": false,\n      \"anim\": {\n        \"enable\": false,\n        \"speed\": 1,\n        \"opacity_min\": 0.1,\n        \"sync\": false\n      }\n    },\n    \"size\": {\n      \"value\": 3,\n      \"random\": true,\n      \"anim\": {\n        \"enable\": false,\n        \"speed\": 40,\n        \"size_min\": 0.1,\n        \"sync\": false\n      }\n    },\n    \"line_linked\": {\n      \"enable\": false,\n      \"distance\": 78.91476416322726,\n      \"color\": \"#ffffff\",\n      \"opacity\": 0.4,\n      \"width\": 1\n    },\n    \"move\": {\n      \"enable\": true,\n      \"speed\": 6,\n      \"direction\": \"top\",\n      \"random\": true,\n      \"straight\": true,\n      \"out_mode\": \"out\",\n      \"bounce\": false,\n      \"attract\": {\n        \"enable\": false,\n        \"rotateX\": 600,\n        \"rotateY\": 1200\n      }\n    }\n  },\n  \"interactivity\": {\n    \"detect_on\": \"canvas\",\n    \"events\": {\n      \"onhover\": {\n        \"enable\": true,\n        \"mode\": \"grab\"\n      },\n      \"onclick\": {\n        \"enable\": true,\n        \"mode\": \"push\"\n      },\n      \"resize\": true\n    },\n    \"modes\": {\n      \"grab\": {\n        \"distance\": 400,\n        \"line_linked\": {\n          \"opacity\": 1\n        }\n      },\n      \"bubble\": {\n        \"distance\": 400,\n        \"size\": 40,\n        \"duration\": 2,\n        \"opacity\": 8,\n        \"speed\": 3\n      },\n      \"repulse\": {\n        \"distance\": 200,\n        \"duration\": 0.4\n      },\n      \"push\": {\n        \"particles_nb\": 4\n      },\n      \"remove\": {\n        \"particles_nb\": 2\n      }\n    }\n  },\n  \"retina_detect\": true\n}","import React from 'react';\r\nimport pConfig from './particlesjs-config';\r\nimport Particles from 'react-particles-js';\r\nimport './ParticlesBg.css';\r\n\r\nconst particleOpt = pConfig;\r\nconsole.log(particleOpt);\r\n\r\nexport default function ParticlesBg(props) {\r\n    return (\r\n        <div className='particles'>\r\n            <Particles\r\n                params={particleOpt}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ParticlesBg from './components/ParticlesBg';\n\nReactDOM.render(<ParticlesBg />, document.getElementById('title'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}